<?php

class LaunchController extends Controller
{

    public function __construct(...$args)
    {
//
// https://coursesuite.ninja.dev/launch/docninja/apikey/$2y$10$ZiYRqbEnr04T4qWHmnsF4e5dCN4wtrLQFE/TgZm.pF/BY0JBlXHcC

        LoggingModel::logInternal(__METHOD__, $args);

        // if length < 1 then there is a problem, bail
        // when length = 1, we are doing /launch/docninja/ - authenticated
        // when length is 2, we are doing /launch/docninja/md5hashvalue/ - maybe unauthenticated
        // when length is 3, we are using the depreciated method for launching, /launch/docninja/apikey/hash
        //                   or we are appending the platform /launch/docninja/hash/platform
        //                       so args[1][2] !== "apikey"
        // if length is > 3 then there is a problem, bail
        // so we only need to check auth when length is 1

        parent::__construct();
        $length = count($args[1]);
        if ($length < 1 || $length > 3) {
            Redirect::home();
        }

        if ($length === 1) {
        	if (AppModel::app_requires_authentication($args[1][0])) {
	            Auth::checkAuthentication();
            }
        }

    }

    /**
    * @api {get} /launch/{app_key}/{token}/ Launch an app using the specified token
    * @apiName Launch
    * @apiGroup App
    * @apiVersion 0.9.0
    * @apiPermission public
    * @apiDescription This URL is also generated by the /api/info/ endpoint. App launch uses a standard 302 redirect
    * @apiParam {String} app_key App Key to launch.
    * @apiParam {String} token Token generated by API (may contain forward-slashes).

    **/
    public function index($app_key, ...$args) // $token = null, ...$depreciated_params)
    {
        $hash = null;
        $token = null;
        $platform = "";

        // args might be the token, or a deprecated method, or might contain multiple parameters... ugh
        if (!empty($args)) { // args is always an array, but might be empty if not specified
            if ($args[0]==="apikey") {
                array_shift($args); // depreciated method access, allowable
            } else if (count($args) === 3) { // 3 args but first wasn't apikey, so probably a platform identifier
                $platform = end($args);
            }
            if (substr($args[0],0,1)==='$') { // might be an older-style token
                $token = substr(implode('/',$args), 0, 60); // hash value might contain / so concat the arguments to form a string, and trim to the first significant hash
                if (password_get_info($token)['algo'] === PASSWORD_BCRYPT) { // seems like bcrypt to me
                    $hash = ApiModel::find_hash_for_token($token);
                }

            } elseif (substr($args[0],0,2)==='JD') { // might be a new base64 encoded token
                $token = substr(Text::base64dec(implode('/',$args)), 0, 60); // hash value might contain / so concat the arguments to form a string, and trim to the first significant hash
                if (password_get_info($token)['algo'] === PASSWORD_BCRYPT) { // seems like bcrypt to me
                    $hash = ApiModel::find_hash_for_token($token);
                }

            } elseif (preg_match('/^[a-f0-9]{32}$/i', $args[0])) { // it's a 128-bit hash - not ideal, but allowable
                $hash = $args[0];

            }
        }

    	// if the app requires some kind of auth
        if (AppModel::app_requires_authentication($app_key)) {

            // need the licencing database to be accurate (later, after this launch)
            Licence::refresh_licencing_info();

            // you might be logged onto CS as yourself but launch an app via an API; you want that app to launch as the API
            if (!is_null($hash) && ApiModel::validate_app_is_in_subscription($hash, $app_key)) {
                // seems like the hash is ok, lets use it

            } else if (($user_id = Session::CurrentUserId()) > 0) {
                // user is logged on already, so validate their subscription
                if (!SubscriptionModel::user_has_active_subscription_to_app($user_id, $app_key)) {
                    Redirect::app($app_key,"/invalid/57894/");
                }
                $ref = SubscriptionModel::get_refid_for_app_for_user($app_key, $user_id);
                // $ref = SubscriptionModel::get_highest_tier_subscription_reference_for_user_for_app($app_key, $user_id);
                $hash = md5($ref);

            // not logged on, and no hash
            } else if (is_null($hash)) {

                Redirect::app($app_key, "/invalid/10298/");

            // } else {

            //     if (!ApiModel::validate_app_is_in_subscription($hash, $app_key)) {
            //     }
            }
        }


        // if the current login has a flag which identifies it as being impersonated, then somehow modify the token to reflect that flag


        // build the url
        $url = AppModel::getLaunchUrl($app_key, $hash, $token, $platform);

        if (!empty($url)) {
            Redirect::external($url);
        } else {
            Redirect::to("500"); // because we don't know what it could be
        }

    }

}
